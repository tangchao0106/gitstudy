0321

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

 git init
 git add readme.txt
 git commit -m "wrote a readme file"
 git status
 git diff readme.txt 
 git log
 git log --pretty=oneline
 git reset --hard HEAD^
 cat readme.txt
 git reset --hard 3628164
 git reflog
 git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
 git checkout -- readme.txt
 rm test.txt
 ssh-keygen -t rsa -C "youremail@example.com"
 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
 git remote add origin git@github.com:michaelliao/learngit.git
 git push -u origin master
 git push origin master
 git clone git@github.com:michaelliao/gitskills.git
 git checkout -b dev
 git branch dev
git checkout dev
git checkout master
git merge dev
git branch -d dev
git branch
git log --graph --pretty=oneline --abbrev-commit
git merge --no-ff -m "merge with no-ff" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。


 并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
$ git stash
 Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
 git stash list
 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：

$ git stash pop

强行删除没有合并的分支：

$ git branch -D feature-vulcan
要查看远程库的信息，用git remote：

$ git remote
git remote -v显示更详细的信息：

$ git push origin master
如果要推送其他分支，比如dev，就改成：

$ git push origin dev

git branch
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：

$ git checkout -b dev origin/dev

git pull

git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev

git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev
git tag v1.0
git tag
git log --pretty=oneline --abbrev-commit

 git tag v0.9 6224937

 git show v0.9

 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：

$ git tag -a v0.1 -m "version 0.1 released" 3628164

 git tag -d v0.1

 因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。

如果要推送某个标签到远程，使用命令git push origin <tagname>：

$ git push origin v1.0
，一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags
，要删除远程标签就麻烦一点，先从本地删除：

$ git tag -d v0.9
从远程删除。删除命令也是push，
 git push origin :refs/tags/v0.9

 git clone git@github.com:michaelliao/bootstrap.git
 //错误

 remote origin already exists--git remote rm origin.
 解决git error: failed to push some refs to 'git@github.com:
 git pull origin master 
 //主线上修改，再创建分支
 创建新仓库
创建新文件夹，打开，然后执行 
git init
以创建新的 git 仓库。

检出仓库
执行如下命令以创建一个本地仓库的克隆版本：
git clone /path/to/repository 
如果是远端服务器上的仓库，你的命令会是这个样子：
git clone username@host:/path/to/repository

工作流
你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。


添加和提交
你可以提出更改（把它们添加到暂存区），使用如下命令：
git add <filename>
git add *
这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：
git commit -m "代码提交信息"
现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。

推送改动
你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：
git push origin master
可以把 master 换成你想要推送的任何分支。 

如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：
git remote add origin <server>
如此你就能够将你的改动推送到所添加的服务器上去了。
分支
分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。


创建一个叫做“feature_x”的分支，并切换过去：
git checkout -b feature_x
切换回主分支：
git checkout master
再把新建的分支删掉：
git branch -d feature_x
除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：
git push origin <branch>

更新与合并
要更新你的本地仓库至最新改动，执行：
git pull
以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：
git merge <branch>
在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：
git add <filename>
在合并改动之前，你可以使用如下命令预览差异：
git diff <source_branch> <target_branch>

标签
为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：
git log
你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。

log
如果你想了解本地仓库的历史记录，最简单的命令就是使用: 
git log
你可以添加一些参数来修改他的输出，从而得到自己想要的结果。 只看某一个人的提交记录:
git log --author=bob
一个压缩后的每一条提交记录只占一行的输出:
git log --pretty=oneline
或者你想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签: 
git log --graph --oneline --decorate --all
看看哪些文件改变了: 
git log --name-status
这些只是你可以使用的参数中很小的一部分。更多的信息，参考：
git log --help
替换本地改动
假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：
git checkout -- <filename>
此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。

假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：
git fetch origin
git reset --hard origin/master

实用小贴士
内建的图形化 git：
gitk
彩色的 git 输出：
git config color.ui true
显示历史记录时，每个提交的信息只显示一行：
git config format.pretty oneline
交互式添加文件到暂存区：
git add -i

用git时，项目编译后，status一下，出现一大堆修改文件，看着头大。
当我们修改了bug后，我们真正修改的文件，混在这一大堆文件里，很难找出来add，commit。
这时候我们需要让git忽略某些文件。

这分两种情况，一种是编译生成的文件，这些文件并不需要加入版本控制，如build目录及一些编译中产生的临时文件等。
如果这种文件或目录不在git仓库里，只要把路径加入工作目录下的 .gitignore 文件中，以后就不会出现了。
如果已经在git仓库里了，
先恢复文件：
git checkout -- file
再从仓库移除：
git rm file
或
git rm -r tree
最后也要把路径加入工作目录下的 .gitignore 文件中。

另外一种情况代码里必须有这个文件，但编译中会修改这个文件，或我自己会临时修改这个文件，但这些文件都不需要提交仓库。
这时需要用另外的命令：
git update-index --assume-unchanged file
这样你对file的修改或编译系统对file的修改，git当看不见了。
如果要恢复git对它的监控:
git update-index --no-assume-unchanged file

git clean -df 时，没有版控的文件会被清除，第一种情况忽略的文件都会被clean的，第二种的不会。
git co . 恢复文件修改时，第二种情况的文件修改会被恢复。
.gitignore 必须加入版控，否则一 clean 就没了。
删除远程文件 git rm 文件
git add * 
git commit 
git push origin master